--- a/drivers/pinctrl/intel/pinctrl-intel.c	2018-07-24 17:22:10.725790230 -0700
+++ b/drivers/pinctrl/intel/pinctrl-intel.c	2018-07-24 17:33:09.883809146 -0700
@@ -875,6 +875,34 @@
 	return -EINVAL;
 }
 
+static int intel_gpio_irq_reqres(struct irq_data *d)
+{
+	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
+	struct intel_pinctrl *pctrl = gpiochip_get_data(gc);
+	int pin;
+
+	pin = intel_gpio_to_pin(pctrl, irqd_to_hwirq(d), NULL, NULL);
+	if (pin >= 0) {
+		if (gpiochip_lock_as_irq(gc, pin)) {
+			dev_err(pctrl->dev, "unable to lock HW IRQ %d for IRQ\n",
+				pin);
+			return -EINVAL;
+		}
+	}
+	return 0;
+}
+
+static void intel_gpio_irq_relres(struct irq_data *d)
+{
+	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
+	struct intel_pinctrl *pctrl = gpiochip_get_data(gc);
+	int pin;
+
+	pin = intel_gpio_to_pin(pctrl, irqd_to_hwirq(d), NULL, NULL);
+	if (pin >= 0)
+		gpiochip_unlock_as_irq(gc, pin);
+}
+
 static void intel_gpio_irq_ack(struct irq_data *d)
 {
 	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
@@ -985,10 +1013,13 @@
 	 * cannot be used as IRQ because GPI_IS status bit will not be
 	 * updated by the host controller hardware.
 	 */
+#if 0
 	if (intel_pad_acpi_mode(pctrl, pin)) {
 		dev_warn(pctrl->dev, "pin %u cannot be used as IRQ\n", pin);
 		return -EPERM;
 	}
+#endif
+	dev_info(pctrl->dev, "pin %u for irq (hwirq=%ld)\n", pin, irqd_to_hwirq(d));
 
 	raw_spin_lock_irqsave(&pctrl->lock, flags);
 
@@ -1090,6 +1121,8 @@
 
 static struct irq_chip intel_gpio_irqchip = {
 	.name = "intel-gpio",
+	.irq_request_resources = intel_gpio_irq_reqres,
+	.irq_release_resources = intel_gpio_irq_relres,
 	.irq_enable = intel_gpio_irq_enable,
 	.irq_ack = intel_gpio_irq_ack,
 	.irq_mask = intel_gpio_irq_mask,
